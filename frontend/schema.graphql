# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Chat {
    _id: ID!
    allowedUsers: [User!]!
    createdBy: User!
    image: File!
    isPrivate: Boolean!
    lastMessage: String!
    messages: [Message!]!
    moderators: [User!]!
    name: String!
    slug: String!
    storeMessages: Boolean!
}

type CreatedBy {
    _id: String!
    avatar: String!
    displayName: String!
    slug: String!
}

type File {
    _id: ID!
    dimensions: FileDimensions!
    isStored: Boolean!
    mimeType: String
    path: String!
}

type FileAddedOutput {
    chatSlug: String!
    messageId: String!
}

type FileDimensions {
    height: Int
    width: Int
}

type Mention {
    _id: ID!
    displayName: String!
    indices: [Int!]!
    slug: String!
}

type Message {
    _id: ID
    chatSlug: String!
    createdAt: DateTime!
    createdBy: CreatedBy!
    creationToken: String
    file: File
    isClientDeleted: Boolean
    text: String!
    userMentions: [Mention!]
}

type Mutation {
    changePassword(newPassword: String!, token: String): Boolean!
    createChat(data: CreateChatInput!): Chat!
    createRestPasswordToken(email: String!): String!
    login(data: LoginInput!): String
    loginWithGoogle(token: String!): String
    postMessage(chatSlug: String!, text: String!): Message
    register(data: RegisterInput!): Boolean!
    updateActiveUsers(chatSlug: String!, crudType: String!): Boolean
    updateMessage(updatePayload: UpdateMessageInput!): Boolean!
    updateTypingUsers(chatSlug: String!, crudType: String!): Boolean
    uploadMessageFile(chatSlug: String!, file: Upload!, messageId: String!): Boolean!
}

type Notification {
    _id: ID!
    content: String!
    isRead: Boolean!
    receiver: User!
    ref: String!
    sender: User!
    type: String!
}

type Query {
    chat(chatSlug: String!): Chat!
    me: User!
    notifications: [Notification!]!
    olderMessages(beforeMessageId: ID!, chatSlug: String!): [Message!]
    roomsList: [Chat!]!
    user(slug: String!): User
    users(displayName: String!, limit: Int): SearchUsersOutput!
    validateResetPasswordToken(token: String!): Boolean!
}

type SearchUsersOutput {
    searchToken: String!
    userList: [User!]!
}

type Subscription {
    onActiveUsersUpdate(chatSlug: String!): [User!]
    onMessageUpdate(chatSlug: String!): String!
    onNewMessage(chatSlug: String!): Message
    onTypingUsersUpdate: UserTypingOutput
    userUpdates: String!
}

type User {
    _id: ID!
    avatar: String!
    createdAt: DateTime!
    createdChatRooms: [Chat!]
    displayName: String!
    email: String!
    excludedPermissions: [String!]!
    ipAddress: String!
    lastActivity: DateTime!
    notifications: [Notification!]!
    permissions: [String!]!
    role: String!
    slug: String!
    unreadNotificationsCount: Int!
}

type UserTypingOutput {
    chatSlug: String!
    crudType: String!
    user: User!
}

input CreateChatInput {
    isPrivate: Boolean!
    name: String!
    storeMessages: Boolean!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    captcha: String!
    displayName: String!
    email: String!
    password: String!
}

input UpdateMessageInput {
    chatSlug: String!
    creationToken: String
    crudType: String!
    messageId: ID!
    messageText: String
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload
