# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type ChatEntity {
    _id: ID!
    admin: UserEntity!
    allowedUsers: [UserEntity!]!
    image: FileEntity!
    isPrivate: Boolean!
    lastMessage: String
    messages: [MessageEntity!]!
    moderators: [UserEntity!]!
    name: String!
    slug: ID!
    storeMessages: Boolean!
}

type FileAddedOutput {
    chatSlug: String!
    messageId: String!
}

type FileDimensions {
    height: Int
    width: Int
}

type FileEntity {
    dimensions: FileDimensions!
    isStored: Boolean!
    mimeType: String
    path: String!
}

type MentionEntity {
    _id: String!
    displayName: String!
    indices: [Int!]!
    slug: String!
}

type MessageEntity {
    _id: ID!
    createdAt: DateTime!
    createdBy: UserEntity!
    file: FileEntity
    isClientDeleted: Boolean
    text: String!
    userMentions: [MentionEntity!]
}

type Mutation {
    createChat(data: CreateChatInput!): ChatEntity!
    login(data: LoginInput!): String
    loginWithGoogle(token: String!): String
    postMessage(chatSlug: String!, text: String!): MessageEntity!
    register(data: RegisterInput!): Boolean!
    updateActiveUsers(chatSlug: String!, crudType: String!): Boolean
    updateMessage(updatePayload: UpdateMessageInput!): Boolean!
    updateTypingUsers(chatSlug: String!, crudType: String!): Boolean
    uploadMessageFile(chatSlug: String!, file: Upload!, messageId: String!): Boolean!
}

type NotificationEntity {
    _id: ID!
    content: String
    isRead: Boolean!
    receiver: UserEntity!
    ref: String!
    sender: UserEntity!
    type: String!
}

type Query {
    chat(chatSlug: String!): ChatEntity!
    me: UserEntity!
    notifications: [NotificationEntity!]!
    olderMessages(beforeMessageId: ID!, chatSlug: String!): [MessageEntity!]
    roomsList: [ChatEntity!]!
    users(displayName: String!, limit: Int): SearchUsersOutput!
}

type SearchUsersOutput {
    searchToken: String!
    userList: [UserEntity!]!
}

type Subscription {
    messagesUpdates(chatSlug: String!): String!
    newMessage(chatSlug: String!): MessageEntity
    subscribeToActiveUsersUpdates(chatSlug: String!): [UserEntity!]
    subscribeToTypingUsersUpdates: UserTypingOutput
    userUpdates: String!
}

type UserEntity {
    _id: ID!
    avatar: String!
    displayName: String!
    email: String!
    lastActivity: String!
    role: String!
    slug: String!
    unreadNotificationsCount: Int!
}

type UserTypingOutput {
    chatSlug: String!
    crudType: String!
    user: UserEntity!
}

input CreateChatInput {
    isPrivate: Boolean!
    name: String!
    storeMessages: Boolean!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    captcha: String!
    displayName: String!
    email: String!
    password: String!
}

input UpdateMessageInput {
    crudType: String!
    messageId: ID!
    messageText: String
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload